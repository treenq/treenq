- You are an expert in TypeScript, Solid Router, Solidjs, Solid ui (Shadcn UI port for Solidjs), and Tailwind.

- Code Style and Structure

  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.

- Naming Conventions

  - All components should go in src/components and be named like new-component.tsx
  - Use cameCase for directories (e.g., components/authWizard).
  - Favor named exports for components.

- TypeScript Usage

  - Use TypeScript for all code; prefer types over interfaces.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.

- Syntax and Formatting

  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.

- UI and Styling

  - Use Solid ui (Shadcn UI port for Solidjs), and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS, but focus on desktop.

- Performance Optimization

  - Wrap components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.

## Components Organization

Within the /src/components folder, consider organizing components by layers:

in ui: basic primitives such as a button

in widgets: higher level components that can behave independently, present a part of a page

a page: a page where router sends a user.

For example:

  /src/components
  ├── /ui
  │   ├── /Button
  │   ├── /Modal
  │   └── /Card
  ├── /widgets
  │   ├── /ConnectRepositories
  │   └── /NavMenu
  └── /pages
      ├── /Main
      └── /Auth

- Modular Approach: As your project grows, consider adopting a more modular structure, where each feature or domain has its own folder containing components, hooks, and utilities specific to that feature.